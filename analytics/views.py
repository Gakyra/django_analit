from django.shortcuts import render, redirect
from django.core.cache import cache
from django.http import JsonResponse
import time
import random

from .coingecko import (
    get_supported_assets,
    get_asset_data,
    get_chart_data,
    get_volume_data,
    calculate_volatility,
    estimate_risk,
    estimate_sentiment,
    generate_forecast
)

last_request_time = 0

# üìà –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –ø–æ—Ä–∞–¥–æ—é –¥–Ω—è
def index(request):
    tips = [
        "–Ü–Ω–≤–µ—Å—Ç—É–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –∞ –Ω–µ –µ–º–æ—Ü—ñ–π–Ω–æ.",
        "–ö—Ä–∞—â–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å, –Ω—ñ–∂ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –∫–∞–ø—ñ—Ç–∞–ª.",
        "–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è ‚Äî —Ç–≤—ñ–π —â–∏—Ç –≤—ñ–¥ —Ä–∏–∑–∏–∫—ñ–≤.",
        "–ù–µ –∫—É–ø—É–π –∞–∫—Ç–∏–≤, —è–∫–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î—à.",
        "–Ü–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ –º–∞—Ä–∞—Ñ–æ–Ω, –∞ –Ω–µ —Å–ø—Ä–∏–Ω—Ç.",
        "–ù–µ —Ä–µ–∞–≥—É–π –Ω–∞ –∫–æ–∂–Ω—É –Ω–æ–≤–∏–Ω—É ‚Äî –º–∞–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é.",
        "–†–∏–∑–∏–∫ ‚Äî —Ü–µ –Ω–µ –≤–æ—Ä–æ–≥, –∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ö–µ—Ä—É–π –Ω–∏–º.",
        "–ü–æ—á–Ω–∏ –∑ –º–∞–ª–æ–≥–æ, –∞–ª–µ –ø–æ—á–Ω–∏ —Å—å–æ–≥–æ–¥–Ω—ñ.",
        "–¢–≤—ñ–π –Ω–∞–π–±—ñ–ª—å—à–∏–π –∞–∫—Ç–∏–≤ ‚Äî —Ü–µ —á–∞—Å.",
        "–ù–µ —à—É–∫–∞–π —ñ–¥–µ–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç ‚Äî —à—É–∫–∞–π –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—É.",
        "–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å ‚Äî –æ—Å–Ω–æ–≤–∞ –±—É–¥—å-—è–∫–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.",
        "–Ü–Ω–≤–µ—Å—Ç—É–π —É —Å–µ–±–µ ‚Äî –∑–Ω–∞–Ω–Ω—è –ø—Ä–∏–Ω–æ—Å—è—Ç—å –Ω–∞–π–≤–∏—â–∏–π –¥–æ—Ö—ñ–¥.",
        "–ü–∞–º‚Äô—è—Ç–∞–π: —Ä–∏–Ω–æ–∫ –∑–∞–≤–∂–¥–∏ –º–∞—î —Ñ–∞–∑–∏. –ù–µ –ø–∞–Ω—ñ–∫—É–π.",
        "–ó–∞–≤–∂–¥–∏ –º–∞–π —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–æ–Ω–¥ ‚Äî —Ü–µ —Ç–≤–æ—è –±–µ–∑–ø–µ–∫–∞.",
        "–í–∏–≤—á–∞–π —ñ—Å—Ç–æ—Ä—ñ—é —Ä–∏–Ω–∫—É ‚Äî –≤–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è.",
    ]
    tip = random.choice(tips)
    return render(request, "index.html", {"tip": tip})

# üìä –§–æ—Ä–º–∞ –≤–∏–±–æ—Ä—É –∞–∫—Ç–∏–≤—É
def analytics_form(request):
    assets = get_supported_assets()
    return render(request, "analytics_form.html", {"assets": assets})

# ‚è≥ –ü—Ä–µ–ª–æ–∞–¥–∏–Ω–≥ –¥–∞–Ω–∏—Ö
def analytics_loading(request):
    asset_id = request.GET.get("asset_id", "bitcoin")
    period = request.GET.get("period", "30")
    forecast = request.GET.get("forecast", "off")
    prefix = f"{asset_id}_{period}"

    preload_success = preload_single_asset_sync(asset_id, period)
    if preload_success:
        return JsonResponse({"status": "ready"})
    else:
        return JsonResponse({"status": "error", "message": f"–ê–Ω–∞–ª—ñ–∑ –¥–ª—è {asset_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."})

# üìâ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
def analytics_result(request):
    if request.method == "POST":
        asset_id = request.POST.get("asset_id", "bitcoin")
        period = request.POST.get("period", "30")
        forecast_enabled = request.POST.get("forecast") == "on"
        return redirect(f"/analytics/result/?asset_id={asset_id}&period={period}&forecast={'on' if forecast_enabled else 'off'}")

    asset_id = request.GET.get("asset_id", "bitcoin")
    period = request.GET.get("period", "30")
    forecast_enabled = request.GET.get("forecast") == "on"
    prefix = f"{asset_id}_{period}"

    chart = cache.get(f"chart_{prefix}")
    volume = cache.get(f"volume_{prefix}")
    asset = cache.get(f"asset_{prefix}")

    if not chart or not volume or not asset:
        return render(request, "loading.html", {
            "asset_id": asset_id,
            "period": period,
            "forecast": "on" if forecast_enabled else "off"
        })

    volatility = calculate_volatility(chart)
    risk_level = estimate_risk(asset.get("change", 0), volatility)
    sentiment = estimate_sentiment(asset.get("volume", 0), asset.get("change", 0))
    forecast = generate_forecast(chart) if forecast_enabled else None

    return render(request, "analytics_result.html", {
        "asset_id": asset_id,
        "asset": asset,
        "period": period,
        "chart": chart,
        "volume": volume,
        "volatility": volatility,
        "risk_level": risk_level,
        "sentiment": sentiment,
        "forecast": forecast
    })

# üöÄ –ü—Ä–µ–ª–æ–∞–¥–∏–Ω–≥ –∫–µ—à—É
def preload_single_asset_sync(asset_id, period):
    global last_request_time
    prefix = f"{asset_id}_{period}"
    now = time.time()

    if now - last_request_time < 30:
        print(f"[PRELOAD] ‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–æ {prefix} ‚Äî —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ({round(now - last_request_time)} —Å–µ–∫)")
        return False
    last_request_time = now

    print(f"[PRELOAD] –°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ {prefix}")
    t0 = time.time()

    chart = get_chart_data(asset_id, days=period)
    volume = get_volume_data(asset_id, days=period)
    asset = get_asset_data(asset_id)

    print(f"[PRELOAD] {prefix} ‚Üí chart={len(chart)}, volume={len(volume)}, price={asset.get('price')}")

    if len(chart) >= 2 and len(volume) >= 2 and asset.get("price", 0) > 0:
        cache.set(f"chart_{prefix}", chart, timeout=3600)
        cache.set(f"volume_{prefix}", volume, timeout=3600)
        cache.set(f"asset_{prefix}", asset, timeout=3600)
        print(f"[PRELOAD] ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ {prefix}")
        print(f"[TIME] preload –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {round((time.time() - t0)*1000)} ms")
        return True
    else:
        print(f"[PRELOAD] ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {prefix} ‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã")
        return False
